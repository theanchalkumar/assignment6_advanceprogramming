1.

def find_the_difference(s, t):
    if len(t) > len(s):
        return t[-1]

print(find_the_difference("abcd","abcde"))
print(find_the_difference("","y"))
print(find_the_difference("ae", "aea"))

2.

def count_datatypes(*args):
    #int, str, bool, list, tuple, dict
    l = [0,0,0,0,0,0] 
    for item in args:
        if type(item) == int:
            l[0] += 1
        if type(item) == str:
            l[1] += 1
        if type(item) == bool:
            l[2] += 1
        if type(item) == list:
            l[3] += 1
        if type(item) == tuple:
            l[4] += 1
        if type(item) == dict:
            l[5] += 1
    return l

print(count_datatypes(1, 45, "Hi", False)  )
print(count_datatypes([10, 20], ("t", "Ok"), 2, 3, 1) )
print(count_datatypes("Hello", "Bye", True, True, False, {"1": "One", "2": "Two"}, [1, 3], {"Brayan": 18}, 25, 23))
print(count_datatypes(4, 21, ("ES", "EN"), ("a", "b"), False, [1, 2, 3], [4, 5, 6]))

3.

def fib_str(n,l):
    new_str = l[0] + ',' + l[1]
    
    while len(new_str.split(',')) < n:
        s2 = l[1] + l[0]
        new_str += ',' +s2
        l[1], l[0] = s2, l[1]

    return new_str

print(fib_str(3, ["j", "h"]))
print(fib_str(5, ["e", "a"]))
print(fib_str(6, ["n", "k"]))

4.

def ones_thress_nines(n):
    l = []
    d = {'nines':0 , 'threes':0 , 'ones' : 0}
    for i in range(0,26):
        for j in range(0,26):
            for k in range(0,26):
                if n == (9 * i + 3 * j + 1 * k):
                    t = (i,j,k)
                    l.append(t)
    d['nines'] = l[-1][0]
    d['threes'] = l[-1][1]
    d['ones'] = l[-1][2]
    return d
print(ones_thress_nines(10))
print(ones_thress_nines(15))
print(ones_thress_nines(22))

5.

def fib(n): # 0,1,1,2,3,5,8,13
    i = 0
    n0 = 0
    n1 = 1
    while i <= n-2:
        n2 = n0 + n1
        n0, n1 = n1, n2
        i += 1
    return n2

print(fib(6))
